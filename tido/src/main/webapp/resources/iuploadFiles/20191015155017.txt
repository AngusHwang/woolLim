# 소프트 웨어 패키징
- 일반적으로 제품에 사용될 소프트웨어 제품을 비교하고 설치하기 위한 방법을 가리킨다.

# 제품 소프트웨어 적용상의 특성 4가지 

1. 제품 소프트웨어는 개발자가 아닌 사용자 중심으로 진행된다.
2. 신규 및 변경 개발 소스를 식별하고, 이를 모듈화하여 상용 제품으로 패키징한다.
3. 고객의편의성을 위해, 신규/변경 이력을 확인하고, 이를 버전 관리 및 릴리즈 노트를 통해 지속적으로 관리해 간다.
4. 사용자의 실행 환경을 이해하고, 범용 환경에서 사용이 가능하도록
   일반적인 배포 형태로 분류하여 패키징이 진행된다.

# JAR(Java Archive)
- 여러 클래스 파일, 관련 리소스(이미지, 로그, 텍스트)를 하나로 묶어서,
  자바 플랫폼 소프트웨어나 라이브러리를 배포하기 위한 용도의 소프트웨어 패키지

# WAR(Web Archive)
- 웹 애플리케이션을 실행하기 위한 클래스 파일들과 제공되어야할 리소스 파일 포함.

# 제품 소프트웨어 패키징
- 개발이 완료된 제품 소프트웨어를 고객에게 전달하기 위한 형태로 패키징하고,
  설치와 사용에 필요한 제반 절차 및 환경 등 전체 내용을 포함하는 메뉴얼을 작성하며,
  제품 소프트웨어에 대한 패치 개발과 업그레이드를 위해 버전 관리를 수행하는 능력

# 제품 소프트웨어 메뉴얼
- 제품 소프트웨어 개발 단계부터의 적용 기준이나 패키징 이후 설치 및 사용자 측면의 주요 내용 등을
  문서로 기록한 것이며, 사용자 중심의 기능 및 방법을 나타낸 설명서와 안내서 

# 제품 소프트웨어 버전 관리
- 기본적으로 작성된 패키지의 변경 내용을 관리하고, SW의 변화를 시간에 따라 기록하며,
  특정 시점의 버전을 다시 꺼내올 수 있도록 관리하는 체계

# 릴리즈 노트
- 조직의 최종 사용자인 고객과 잘 정리된 릴리즈 정보를 공유하는 문서

# 릴리즈 노트 작성 시 고려 사항 
- 개발 팀에서 Ownership을 가지고 직접 작성하여야 한다. 꼭 현재 시제로 작성되어야 하며,
  명확하고 정확하며 완전한 정보를 제공한다.

# 제품 소프트웨어 패키징 도구란?
- 배포를 위한 패키징 시에 디지털 콘텐츠의 지적 재산권을 보호하고 관리하는 기능을 제공하며,
  안전한 유통과 배포를 보장하는 도구이자 솔루션

# 저작권이란?
- 문학 학술 또는 예술의 범위에 속하는 창작물인 저작물에 대한 배타적 독릭된 권리.
  타인의 침해를 받지 않을 고유한 권한

# 저작권 보호 기술의 필요성
- 배포된 제품 소프트웨어의 무한 복제가 가능하고 원본과 복사본이 동일하게 배포될 특성을 가진다.
- 제품 소프트웨어가 사용으로 배포되면, 다양한 부가 가치를 가질 수 있는 상품으로 바뀜에 따라
  패키징 시에 원작자에 대한 권리 보호 우선 필요 

# 제품 소프트웨어의 메뉴얼의 파악
- 제품 소프트웨어 개발단계부터 적용한 기준이나 패키징 이후 설치 및 사용자 측면의 주요 내용 등을 
  문서로 기록한 것.
- 사용자 중심의 기능 및 방법을 나타낸 설명서와 안내서를 의미한다.

# 설치 메뉴얼 작성의 기본 사항 4가지
1. 설치 메뉴얼은 개발자의 기준이 아닌 사용자의 기준으로 작성한다.
2. 최초 설치 실행부터 완료까지 순차적으로 진행한다.
3. 각 단계별 메시지 및 해당 화면을 순서대로 전부 캡처하여 설명한다.
4. 설치 중간에 이상 발생 시 해당 메시지 및 에러에 대한 내용을 분류하여 설명한다.

# 제품 소프트웨어 배포본이란?
- 개발된 컴포넌트 또는 패키지에 대해 제품화하고 배포 정보를 포함하여 진행하는 것

# 제품 소프트웨어 배포본의 중요 사항
1. 최종 완성된 제품으로 안정성을 고려하여 배포한다.
2. 신규 및 변경을 고려하여 배포본에는 고유 버전 및 배포 단위의 기준을 정한다.
3. 배포용 미디어를 제작할 때에는 저작권 및 보안에 유의하여 제작한다.
4. 배포본은 자체의 고유 시리얼 넘버를 반드시 부착하여 복제 및 사후 지원을 고려하여 제작한다.

# 제품 소프트웨어 형상 관리 파악
- SW의 변화를 시간에 따라 기록하고 특정 시점의 버전을 다시 꺼내올 수 있도록 관리하는 것을 의미한다.

# 제품 소프트웨어의 형상 관리 중요성
1. 지속적으로 변경되는데 이에 대한 개발 통제가 중요하다.
2. 형상 관리가 잘되지 않으면 배포판의 버그 및 수정에 대한 추적의 결여 및 무절제한 변경이 난무할 수 있다.
3. 형상 관리가 잘 되지 않으면 제품 소프트웨어의 가시성의 결핌이 일어난다.
  장기적인 관리 체계에 문제를 발생시킬 수 있다.

# 제품 소프트웨어의 형상 관리 역할 
1. 이전 리비전이나 버전에 대한 정보에 언제든지 접근 가능하여 배포본 관리에 아주 유용하다.
2. 불필요한 사용자의 소스 수정 제한
3. 동일한 프로젝트에 대해 여러 개발자 도시 개발 가능
4. 에러가 발생했을 경우 빠른 시간 내에 복구 가능 

# 충돌
같은 부분을 여러사람이 작업할 경우에 git이 여러개의 변경사항 중에서
어떤 부분을 채택할 지 사용자 위임하는 것

# 로컬 저장소
- 개인 PC에 저장되는 개인 전용 저장소 

# 원격 저장소
- git 서버에 있는 여러사람이 함께 공유할 수 있는 저장소

# git
- 기존 리눅스 커널의 버전 컨트롤을 하는 Bitkeeper를 대체 하기 위해서 나온 새로운 버전 컨트롤로, 
  현재의 리눅스는 이것을 통해 버전 컨트롤이 되고 있다.

# commit
- 변경된 사항들을 로컬 저장소에 저장시키는 것 

# push
- 로컬 저장소의 변경 사항을 원격 저장소에 저장하는 것 

# pull
- 원격 저장소의 최신 버전을 가져와 현재 로컬 저장소에 저장, 병합하는 것 

# git 흐름 
프로젝트를 원격 저장소에 저장 -> gitignore 생성 -> gitignore 작성 
-> 로컬 저장소에 저장(commit) -> 원격 저장소에 저장(push) 

# gitignore 파일이란?
- 로컬 저장소에는 저장되어있지만, 원격 저장소에 저장하지 않는 파일들이 명시되어 있는 파일 
- 일반적으로 각 작업자별로 사용하는 개인 환경설정 파일 등을 glob이라는 언어를 사용하여 명시한다.

# version\springProject191011.war
- version 폴더에 패키징한 spring.war 저장은 하되, 공유는 안하고 싶다.
- history\*.war 로 저장을 한다.
- (history라는 폴더에 모든 war 파일을 저장한다)
